version: 2

workflows:
  version: 2
  build-master:
    jobs:
      - test:
          filters:
            branches:
              only: master
      - integration-test:
          filters:
            branches:
              only: master
  build-other-branches:
    jobs:
      - test:
          filters:
            branches:
              ignore: master
      - integration-test:
          filters:
            branches:
              only: master

jobs:
  test:
    docker:
      - image: node:12.16.1-alpine3.11
    steps:
      - checkout
      - run: |
          apk update && apk upgrade
          apk add --no-cache git openssh make gcc g++ python
      - run:
          name: Install Dependencies
          command: |
            npm install
            npm run lerna-reset
      - run:
          name: Run Linter
          command: npm run lint
      - run:
          name: Run Unit Tests
          command: npm run test

  integration-test:
    machine:
      image: ubuntu-1604:201903-01 
    steps:
      - checkout
      - run:
          name: Setup Machine
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install v12.16.1
            nvm alias default v12.16.1
            curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
            docker-compose --version
      - run:
          name: Install Dependencies
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            npm install
            npm run lerna-reset
      - run:
          name: Setup elixir-omg
          command: |
            mkdir -p ~/.ssh/
            echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            git clone git@github.com:omisego/elixir-omg.git ~/elixir-omg
            cd ~/elixir-omg
            SNAPSHOT=SNAPSHOT_MIX_EXIT_PERIOD_SECONDS_120 make init_test
      - run:
          name: Start elixir-omg
          background: true
          command: |
            cd ~/elixir-omg
            docker-compose up
      - run:
          name: Setup Integration Test with ERC20
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd ~/project/packages/integration-tests
            wget --retry-connrefused --waitretry=10 --read-timeout=10 --timeout=10 -t 100 http://localhost:7534/status.get
            npm run deploy-test-erc20
      - run:
          name: Run Integration Test
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            npm run ci-test
          environment:
            ETH_NODE: http://localhost:8545
            WATCHER_URL: http://localhost:7534
            CHILDCHAIN_URL: http://localhost:9656
            PLASMAFRAMEWORK_CONTRACT_ADDRESS: "0xc673e4ffcb8464faff908a6804fe0e635af0ea2f"
            ERC20_CONTRACT_ADDRESS: "0x932130ff6e440aee05e6fa75ac5d385c4e3a4d5d"
            FUND_ACCOUNT: "0x6de4b3b9c28e9c3e84c2b2d3a875c947a84de68d"
            FUND_ACCOUNT_PRIVATEKEY: "0xd885a307e35738f773d8c9c63c7a3f3977819274638d04aaf934a1e1158513ce"
            MIN_AMOUNT_ETH_PER_TEST: 2
            MIN_AMOUNT_ERC20_PER_TEST: 20
            TOPUP_MULTIPLIER: 5
            FAUCET_SALT: integration-tests
